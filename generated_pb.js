/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.gomad.AddIngredientRequest', null, global);
goog.exportSymbol('proto.gomad.Ingredient', null, global);
goog.exportSymbol('proto.gomad.IngredientSelection', null, global);
goog.exportSymbol('proto.gomad.NutritionalReportResponse', null, global);
goog.exportSymbol('proto.gomad.Pizza', null, global);
goog.exportSymbol('proto.gomad.RemoveIngredientRequest', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gomad.IngredientSelection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gomad.IngredientSelection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.gomad.IngredientSelection.displayName = 'proto.gomad.IngredientSelection';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gomad.IngredientSelection.prototype.toObject = function(opt_includeInstance) {
  return proto.gomad.IngredientSelection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gomad.IngredientSelection} msg The msg instance to transform.
 * @return {!Object}
 */
proto.gomad.IngredientSelection.toObject = function(includeInstance, msg) {
  var f, obj = {
    ingredient: jspb.Message.getFieldWithDefault(msg, 1, 0),
    portions: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gomad.IngredientSelection}
 */
proto.gomad.IngredientSelection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gomad.IngredientSelection;
  return proto.gomad.IngredientSelection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gomad.IngredientSelection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gomad.IngredientSelection}
 */
proto.gomad.IngredientSelection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.gomad.Ingredient} */ (reader.readEnum());
      msg.setIngredient(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPortions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gomad.IngredientSelection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gomad.IngredientSelection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gomad.IngredientSelection} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.gomad.IngredientSelection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIngredient();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getPortions();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional Ingredient ingredient = 1;
 * @return {!proto.gomad.Ingredient}
 */
proto.gomad.IngredientSelection.prototype.getIngredient = function() {
  return /** @type {!proto.gomad.Ingredient} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.gomad.Ingredient} value */
proto.gomad.IngredientSelection.prototype.setIngredient = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 portions = 2;
 * @return {number}
 */
proto.gomad.IngredientSelection.prototype.getPortions = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.gomad.IngredientSelection.prototype.setPortions = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gomad.Pizza = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.gomad.Pizza.repeatedFields_, null);
};
goog.inherits(proto.gomad.Pizza, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.gomad.Pizza.displayName = 'proto.gomad.Pizza';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.gomad.Pizza.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gomad.Pizza.prototype.toObject = function(opt_includeInstance) {
  return proto.gomad.Pizza.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gomad.Pizza} msg The msg instance to transform.
 * @return {!Object}
 */
proto.gomad.Pizza.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    ingredientsList: jspb.Message.toObjectList(msg.getIngredientsList(),
    proto.gomad.IngredientSelection.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gomad.Pizza}
 */
proto.gomad.Pizza.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gomad.Pizza;
  return proto.gomad.Pizza.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gomad.Pizza} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gomad.Pizza}
 */
proto.gomad.Pizza.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.gomad.IngredientSelection;
      reader.readMessage(value,proto.gomad.IngredientSelection.deserializeBinaryFromReader);
      msg.addIngredients(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gomad.Pizza.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gomad.Pizza.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gomad.Pizza} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.gomad.Pizza.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getIngredientsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.gomad.IngredientSelection.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.gomad.Pizza.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.gomad.Pizza.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated IngredientSelection ingredients = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.gomad.IngredientSelection>}
 */
proto.gomad.Pizza.prototype.getIngredientsList = function() {
  return /** @type{!Array.<!proto.gomad.IngredientSelection>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.gomad.IngredientSelection, 2));
};


/** @param {!Array.<!proto.gomad.IngredientSelection>} value */
proto.gomad.Pizza.prototype.setIngredientsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.gomad.IngredientSelection=} opt_value
 * @param {number=} opt_index
 * @return {!proto.gomad.IngredientSelection}
 */
proto.gomad.Pizza.prototype.addIngredients = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.gomad.IngredientSelection, opt_index);
};


proto.gomad.Pizza.prototype.clearIngredientsList = function() {
  this.setIngredientsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gomad.AddIngredientRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gomad.AddIngredientRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.gomad.AddIngredientRequest.displayName = 'proto.gomad.AddIngredientRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gomad.AddIngredientRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.gomad.AddIngredientRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gomad.AddIngredientRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.gomad.AddIngredientRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    arg1: (f = msg.getArg1()) && proto.gomad.Pizza.toObject(includeInstance, f),
    arg2: jspb.Message.getFieldWithDefault(msg, 2, 0),
    arg3: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gomad.AddIngredientRequest}
 */
proto.gomad.AddIngredientRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gomad.AddIngredientRequest;
  return proto.gomad.AddIngredientRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gomad.AddIngredientRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gomad.AddIngredientRequest}
 */
proto.gomad.AddIngredientRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.gomad.Pizza;
      reader.readMessage(value,proto.gomad.Pizza.deserializeBinaryFromReader);
      msg.setArg1(value);
      break;
    case 2:
      var value = /** @type {!proto.gomad.Ingredient} */ (reader.readEnum());
      msg.setArg2(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setArg3(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gomad.AddIngredientRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gomad.AddIngredientRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gomad.AddIngredientRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.gomad.AddIngredientRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getArg1();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.gomad.Pizza.serializeBinaryToWriter
    );
  }
  f = message.getArg2();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getArg3();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional Pizza arg1 = 1;
 * @return {?proto.gomad.Pizza}
 */
proto.gomad.AddIngredientRequest.prototype.getArg1 = function() {
  return /** @type{?proto.gomad.Pizza} */ (
    jspb.Message.getWrapperField(this, proto.gomad.Pizza, 1));
};


/** @param {?proto.gomad.Pizza|undefined} value */
proto.gomad.AddIngredientRequest.prototype.setArg1 = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.gomad.AddIngredientRequest.prototype.clearArg1 = function() {
  this.setArg1(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.gomad.AddIngredientRequest.prototype.hasArg1 = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Ingredient arg2 = 2;
 * @return {!proto.gomad.Ingredient}
 */
proto.gomad.AddIngredientRequest.prototype.getArg2 = function() {
  return /** @type {!proto.gomad.Ingredient} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.gomad.Ingredient} value */
proto.gomad.AddIngredientRequest.prototype.setArg2 = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 arg3 = 3;
 * @return {number}
 */
proto.gomad.AddIngredientRequest.prototype.getArg3 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.gomad.AddIngredientRequest.prototype.setArg3 = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gomad.NutritionalReportResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gomad.NutritionalReportResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.gomad.NutritionalReportResponse.displayName = 'proto.gomad.NutritionalReportResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gomad.NutritionalReportResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.gomad.NutritionalReportResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gomad.NutritionalReportResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.gomad.NutritionalReportResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    result1: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gomad.NutritionalReportResponse}
 */
proto.gomad.NutritionalReportResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gomad.NutritionalReportResponse;
  return proto.gomad.NutritionalReportResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gomad.NutritionalReportResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gomad.NutritionalReportResponse}
 */
proto.gomad.NutritionalReportResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setResult1(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gomad.NutritionalReportResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gomad.NutritionalReportResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gomad.NutritionalReportResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.gomad.NutritionalReportResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult1();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string result1 = 1;
 * @return {string}
 */
proto.gomad.NutritionalReportResponse.prototype.getResult1 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.gomad.NutritionalReportResponse.prototype.setResult1 = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gomad.RemoveIngredientRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gomad.RemoveIngredientRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.gomad.RemoveIngredientRequest.displayName = 'proto.gomad.RemoveIngredientRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gomad.RemoveIngredientRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.gomad.RemoveIngredientRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gomad.RemoveIngredientRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.gomad.RemoveIngredientRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    arg1: (f = msg.getArg1()) && proto.gomad.Pizza.toObject(includeInstance, f),
    arg2: jspb.Message.getFieldWithDefault(msg, 2, 0),
    arg3: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gomad.RemoveIngredientRequest}
 */
proto.gomad.RemoveIngredientRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gomad.RemoveIngredientRequest;
  return proto.gomad.RemoveIngredientRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gomad.RemoveIngredientRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gomad.RemoveIngredientRequest}
 */
proto.gomad.RemoveIngredientRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.gomad.Pizza;
      reader.readMessage(value,proto.gomad.Pizza.deserializeBinaryFromReader);
      msg.setArg1(value);
      break;
    case 2:
      var value = /** @type {!proto.gomad.Ingredient} */ (reader.readEnum());
      msg.setArg2(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setArg3(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gomad.RemoveIngredientRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gomad.RemoveIngredientRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gomad.RemoveIngredientRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.gomad.RemoveIngredientRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getArg1();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.gomad.Pizza.serializeBinaryToWriter
    );
  }
  f = message.getArg2();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getArg3();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional Pizza arg1 = 1;
 * @return {?proto.gomad.Pizza}
 */
proto.gomad.RemoveIngredientRequest.prototype.getArg1 = function() {
  return /** @type{?proto.gomad.Pizza} */ (
    jspb.Message.getWrapperField(this, proto.gomad.Pizza, 1));
};


/** @param {?proto.gomad.Pizza|undefined} value */
proto.gomad.RemoveIngredientRequest.prototype.setArg1 = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.gomad.RemoveIngredientRequest.prototype.clearArg1 = function() {
  this.setArg1(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.gomad.RemoveIngredientRequest.prototype.hasArg1 = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Ingredient arg2 = 2;
 * @return {!proto.gomad.Ingredient}
 */
proto.gomad.RemoveIngredientRequest.prototype.getArg2 = function() {
  return /** @type {!proto.gomad.Ingredient} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.gomad.Ingredient} value */
proto.gomad.RemoveIngredientRequest.prototype.setArg2 = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 arg3 = 3;
 * @return {number}
 */
proto.gomad.RemoveIngredientRequest.prototype.getArg3 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.gomad.RemoveIngredientRequest.prototype.setArg3 = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * @enum {number}
 */
proto.gomad.Ingredient = {
  PEPPERONI: 0,
  PINEAPPLE: 1,
  HAM: 2,
  BACON: 3,
  CHICKEN: 4,
  LAMB: 5,
  NO_FOOD: 6
};

goog.object.extend(exports, proto.gomad);
